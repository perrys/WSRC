#!/usr/bin/env python
#
# Authenticate dovecot using Django database
# Modified from https://github.com/ser/checkpassword-phpbb
# by Serge Victor, LGPLv3 license
#

import logging
import os
import pwd
import sys
import traceback

LOGGER = logging.getLogger(__name__)
LOGGER.setLevel(logging.INFO)

GROUP_ID = 5000
USER_ID = 5000
DEFAULT_DOMAIN = "wokingsquashclub.org"

sys.path.append("/usr/local/lib/python2.7/dist-packages")

def get_user(username):
    from django.contrib.auth.models import User
    users = User.objects.filter(username=username.replace(" ", "_"))
    if users.count() == 1:
        return users[0]
    return None
    
def main():
    is_userdb_lookup = os.environ.get("AUTHORIZED") == "1"
    if is_userdb_lookup:
        LOGGER.debug("performing userdb lookup...")    
        os.putenv("AUTHORIZED", "2")
    else:
        LOGGER.debug("performing passdb lookup...")

    with os.fdopen(3) as infile:
        data = infile.read(512).split('\0')
    LOGGER.debug("authentication data=\"%s\"", data)
    
    username, password = data[:2]
    justuser = username.split("@")[0]
    try:
        domain = username.split("@")[1]
    except:
        domain = DEFAULT_DOMAIN

    user = get_user(justuser)
    if is_userdb_lookup:
        if user is None:
            LOGGER.warning("user \"%s\" not found", justuser)
            return 3
    else:
        if user is None:
            LOGGER.warning("user \"%s\" not found", justuser)
            return 1
        elif not user.check_password(password):
            LOGGER.warning("authentication failed for user \"%s\"", justuser)
            return 1

    LOGGER.info("Authentication succeeded for %s", justuser)
    os.environ['USER'] = "%s@%s" % (justuser, domain)
    os.environ['HOME'] = "/var/spool/vmail/vhosts/%s/%s" % (domain, justuser) # adapt it to your needs
    os.environ['userdb_uid'] = "{0}".format(USER_ID) # adapt it to your needs
    os.environ['userdb_gid'] = "{0}".format(GROUP_ID) # adapt it to your needs
    
    # because the values are standard for all domains, I set it in conf.d/auth-sql.conf.ext
    #os.environ['userdb_mail'] = "maildir:~/Maildir:INBOX=~/Maildir/.INBOX:INDEX=/home/vmail/indexes/%d/%n:CONTROL=/home/vmail/control/%d/%n" # adapt it to your needs
    #os.environ['userdb_quota_rule'] = "*:storage=10000M" # adapt it to your needs and add to EXTRA environ

    os.environ['EXTRA'] = 'userdb_uid userdb_gid'
    os.execvp(sys.argv[1], sys.argv[1:])

if __name__ == "__main__":

    logging.basicConfig(format='%(asctime)-10s [%(levelname)s] %(message)s', datefmt="%Y-%m-%d %H:%M:%S", stream=sys.stderr)
#    LOGGER.debug("environment: %s", "\n".join([str([k, v]) for k,v in os.environ.items()]))

    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "wsrc.site.settings.settings")
    
    try:
        LOGGER.debug("opening django")
        import django
        if hasattr(django, "setup"):
            django.setup()
        sys.exit(main() or 111)
    except KeyboardInterrupt:
        sys.exit(2)
    except Exception:
        LOGGER.exception("unexpected error")
        sys.exit(111)

# the easiest way for debugging in a command line:
# printf "%s\0%s\0%s\0" unknown bloggs Y123456 | ./dovecot-checkpassword id 3<&0
#
