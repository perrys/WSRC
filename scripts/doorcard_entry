#!/usr/bin/env python
# -*- coding: utf-8 -*-

# This file is part of WSRC.
#
# WSRC is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# WSRC is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with WSRC.  If not, see <http://www.gnu.org/licenses/>.

import collections
import cookielib
import datetime
import getopt
import httplib
import json
import logging
import os
import os.path
import re
import sys
import threading
import time
import urllib
import urllib2
import unittest

import Queue
import StringIO

import serial

LOGGER = logging.getLogger(__name__)
LOGGER.setLevel(logging.INFO)

class EntryReader(object):

    def __init__(self, serial_instance):
        self.input_queue = Queue.Queue()
        self.serial = serial_instance
        self._reader_alive = False
        self.receiver_thread = None
        self._start_reader()

    def getline(self, block=False, timeout=None):
        """Return the next line from the serial port.  If optional args block
           is true and timeout is None (the default), block if
           necessary until an item is available. If timeout is a
           positive number, it blocks at most timeout seconds and
           raises the Empty exception if no item was available within
           that time. Otherwise (block is false), return an item if
           one is immediately available, else raise the Empty
           exception (timeout is ignored in that case).
        """
        return self.input_queue.get(block, timeout)

    def stop(self):
        self._reader_alive = False

    def join(self):
        self.receiver_thread.join()

    def _start_reader(self):
        """Start reader thread"""
        self._reader_alive = True
        # start serial->console thread
        self.receiver_thread = threading.Thread(target=self.reader, name='rx')
        self.receiver_thread.daemon = True
        self.receiver_thread.start()

    def in_waiting(self):
        if hasattr(self.serial, "in_waiting"):
            return serial.Serial.in_waiting
        elif hasattr(self, serial, "inWaiting"):
            return serial.Serial.inWaiting()
        raise Exception("unable to get bytes in waiting")
        
    def _stop_reader(self):
        """Stop reader thread only, wait for clean exit of thread"""
        self._reader_alive = False
        self.receiver_thread.join()
        LOGGER.info("Reader thread stopped")

    def reader(self):
        """loop and copy lines to consumer queue"""
        LOGGER.info("Reader thread started")
        try:
            buf = StringIO.StringIO()
            while self._reader_alive:
                # read all that is there or wait for one byte
                data = self.serial.read(self.in_waiting() or 1)
                if len(data) > 0:
                    buf.write(data)
                    data = buf.getvalue()
                    if "\n" in data:
                        lines = data.split("\n")
                        last_line = lines.pop()
                        buf.truncate(0)
                        buf.write(last_line)
                        for line in lines:
                            self.input_queue.put(line)
                else:
                    time.sleep(0.2) # should only happen for mocked serial
            LOGGER.info("Reader thread stopping..")
        except serial.SerialException:
            self._reader_alive = False
            raise

class RESTClient(object):

    def __init__(self, base_url, auth_endpoint, credentials):
        self.base_url = base_url
        self.opener = self.get_opener()
        self.auth_endpoint = auth_endpoint
        self.credentials = credentials
        self.username = None
        self.csrf_token = None

    def authenticate(self):
        response = self.request(self.auth_endpoint)
        if response.getcode() != httplib.OK:
            raise Exception("Unable to obtain CSRF token: " + response.read())
        data = json.load(response)
        self.csrf_token = data["csrf_token"]
        if data["username"] is None:
            LOGGER.info("Logging in to upload service..")
            headers = {"X-CSRFToken": self.csrf_token}
            response = self.request(self.auth_endpoint, self.credentials, headers)
            if response.getcode() != httplib.OK:
                raise Exception("Unable to authenticate: " + response.read())
            data = json.load(response)
            self.username = data["username"]
            self.csrf_token = data["csrf_token"]
            LOGGER.info("Logged in as %s", self.username)

    def post_data(self, selector, params):
        self.authenticate()
        headers = {"X-CSRFToken": self.csrf_token}
        LOGGER.debug("Uploading [%s]: %s", selector, params)
        return self.request(selector, params, headers)

    def request(self, selector, params=None, headers={}):
        try:
            """Make a request for the given selector.
               This method returns a file like object as specified by urllib2.urlopen()"""
            url = self.base_url + selector
            if params is not None:
                params = urllib.urlencode(params)
            LOGGER.debug("opening url %s, params: %s, headers: %s", url, params, headers)
            request = urllib2.Request(url, headers=headers)
            response = self.opener.open(request, params)
            return response
        except urllib2.HTTPError, exc:
            LOGGER.error(exc)
            LOGGER.error("body: %s", exc.read())
            raise exc

    @staticmethod
    def get_opener():
        cookiejar = cookielib.CookieJar()
        return urllib2.build_opener(urllib2.HTTPCookieProcessor(cookiejar))

class DoorEntryDataParser(object):
    event_regex = re.compile(r"(?P<time>\d\d:\d\d)   (?P<date>\d\d/\d\d/\d\d) (?P<data>.*)")
    numbered_event_regex = re.compile(r"(?P<cardnumber>\d+) (?P<event>\w+)")
    dump_header_regex = re.compile(r"Maximum number of IDs = (?P<max>\d+), valid IDs = (?P<valid>\d+)")

    result_type = collections.namedtuple("ParseResult", ['destination', 'data'])

    def __init__(self, event_destination, dump_destination, email_address):
        self.event_destination = event_destination
        self.dump_destination = dump_destination
        self.email_address = email_address
        self.leftover = ""
        self.dump_buffer = None

    def __call__(self, line):
        "Parse a line from the door entry system"
        line = self.leftover + line
        self.leftover = ""
        LOGGER.debug("Got line to parse: \"%s\"", line)
        match = self.event_regex.search(line)
        if match:
            toks = match.groupdict()
            timestamp = "{0} {1}".format(toks["date"], toks["time"])
            timestamp = datetime.datetime.strptime(timestamp, "%d/%m/%y %H:%M")
            prefix = line[:match.start()]
            event, remainder = self.parse_event(timestamp, toks["data"])
            # if event occured in the middle of some data dump, there
            # should be an extra newline in the data
            self.leftover = prefix + remainder
            LOGGER.info("Parsed event %s", event)
            return self.result_type(self.event_destination, event)
        match = self.dump_header_regex.match(line)
        if match:
            self.dump_buffer = [line]
            LOGGER.info("Recognised data header \"%s\", recording..", line)
            return None
        if len(line) > 0:
            if self.dump_buffer is not None:
                self.dump_buffer.append(line)
                return None
            else:
                LOGGER.warning("unrecognised output: \"%s\"", line)
                return None
        else:
            if self.dump_buffer is not None:
                params = {
                    "format": "text",
                    "subject": "Data from Cardreader",
                    "from_address": self.email_address,
                    "to": self.email_address,
                    "body": "\n".join(self.dump_buffer)
                }
                LOGGER.info("Finished data dump of %d line(s), sending email..", len(self.dump_buffer))
                result = self.result_type(self.dump_destination, params)
                self.dump_buffer = None
                return result
        return None

    def parse_event(self, timestamp, data):
        match = self.numbered_event_regex.search(data)
        if match is not None:
            toks = match.groupdict()
            event = {
                "timestamp": timestamp.isoformat(),
                "card": toks["cardnumber"],
                "event": toks["event"]
            }
            return (event, data[match.end():])
        event = {
            "timestamp": timestamp.isoformat(),
            "event": data
        }
        return event, ""

class REPL(object):
    def __init__(self, reader, parser, uploader):
        self.reader = reader
        self.parser = parser
        self.uploader = uploader
        self.keep_looping = True

    def stop(self):
        self.keep_looping = False

    def loop(self):
        while self.keep_looping:
            try:
                line = self.reader.getline(block=True, timeout=1)
                result = self.parser(line)
                if result is not None:
                    self.uploader.post_data(result.destination, result.data)
            except Queue.Empty:
                pass
            except urllib2.HTTPError:
                pass # Error has already been logged


class Tester(unittest.TestCase):

    def test_GIVEN_RESTClient_with_false_credentials_WHEN_authenticating_THEN_error_returned(self):
        client = RESTClient("http://localhost:8000/", "data/auth/",
                            {"username": "nobody", "password": "foobar"})
        def dotest():
            client.authenticate()
        self.assertRaisesRegexp(urllib2.HTTPError, "403: FORBIDDEN", dotest)

    def test_GIVEN_EntryReader_with_mocked_serial_WHEN_reading_file_THEN_all_contents_returned(self):
        test_input = "foo\nbar\n"
        mock_serial = StringIO.StringIO(test_input)
        mock_serial.in_waiting = 0
        reader = EntryReader(mock_serial)
        expected = test_input.split("\n")[:-1]
        found = []
        while len(found) < len(expected):
            line = reader.getline(block=True, timeout=1)
            found.append(line)
        self.assertRaises(Queue.Empty, lambda: reader.getline(block=False))

    def test_GIVEN_parser_WHEN_parsing__events_THEN_returns_events(self):
        test_data = """
18:03   25/11/17 65346025 Granted
18:04   25/11/17 65346025 Granted
"""
        evt_dest = "foobar"
        parser = DoorEntryDataParser(evt_dest, None, "foo@bar")
        results = []
        for line in StringIO.StringIO(test_data).readlines():
            result = parser(line.strip())
            if result is not None:
                results.append(result)
        self.assertEqual(2, len(results))
        dst, data = results[0]
        self.assertEqual(evt_dest, dst)
        self.assertEqual('2017-11-25T18:03:00', data["timestamp"])
        self.assertEqual("65346025", data["card"])
        self.assertEqual("Granted", data["event"])
        dst, data = results[1]
        self.assertEqual(evt_dest, dst)
        self.assertEqual('2017-11-25T18:04:00', data["timestamp"])

    def test_GIVEN_parser_WHEN_parsing_interuppted_dump_output_THEN_returns_both_data(self):
        test_data = """
        
Maximum number of IDs = 1024, valid IDs = 0567
Id number  Zone Door
58282202   ----
51788707   1---
65822862   ----
65346302   1---
65346309   1---
65841684   ----18:03   25/11/17 Misread

57700780   ----
65838863   ----

"""
        evt_dest, dump_dest = ("foo", "bar")
        email = "foo@bar"
        parser = DoorEntryDataParser(evt_dest, dump_dest, email)
        results = []
        for line in StringIO.StringIO(test_data).readlines():
            result = parser(line.strip())
            if result is not None:
                results.append(result)
        self.assertEqual(2, len(results))
        dst, data = results[0]
        self.assertEqual(evt_dest, dst)
        self.assertEqual('2017-11-25T18:03:00', data["timestamp"])
        self.assertEqual("Misread", data["event"])
        self.assertNotIn("card", data)
        dst, data = results[1]
        self.assertEqual(dump_dest, dst)
        self.assertIn("body", data)
        lines = data.get("body").split("\n")
        self.assertGreater(len(lines), 5)
        self.assertEqual("65838863   ----", lines[-1])
        self.assertIn("from_address", data)
        self.assertEqual(email, data["from_address"])

def setup_logger(stream=None):
    import tempfile
    tmpdir = tempfile.gettempdir()
    filename = os.path.join(tmpdir, "doorcard_{0:%Y-%m-%d}.log".format(datetime.date.today()))
    file_handler = logging.FileHandler(filename)
    def addHandler(handler):
        formatter = logging.Formatter('%(asctime)-10s %(threadName)s [%(levelname)s] %(message)s',datefmt="%Y-%m-%d %H:%M:%S")
        handler.setFormatter(formatter)
        root = logging.getLogger()
        root.addHandler(handler)
    addHandler(file_handler)
    if stream is not None:
        stream_handler = logging.StreamHandler(stream)
        addHandler(stream_handler)



def main():
    setup_logger(sys.stdout)
    threading.current_thread().name = "main"
    program = os.path.basename(sys.argv[0])
    def usage():
        sys.stderr.write("USAGE: {0} --config <file>\n".format(program))
    try:
        optlist, args = getopt.getopt(sys.argv[1:], "c:", ["config="])
    except getopt.GetoptError as err:
        sys.stderr.write(str(err) + "\n")
        usage()
        sys.exit(2)
    if len(args) > 0:
        usage()
        sys.exit(2)

    configfile = None
    config_cls = collections.namedtuple("Config", [
        "base_url",
        "event_endpoint",
        "dump_endpoint",
        "auth_endpoint",
        "credentials",
        "serial_parameters",
    ])
    for opt, val in optlist:
        if opt in ["-c", "--config"]:
            configfile = val
    if configfile is None:
        usage()
        sys.exit(2)
    config_dict = {"config_cls": config_cls}
    execfile(os.path.expanduser(configfile), globals(), config_dict)
    config = config_dict["config"]
    parser = DoorEntryDataParser(config.event_endpoint, config.dump_endpoint,\
                                 config.email_address)
    uploader = RESTClient(config.base_url, config.auth_endpoint, config.credentials)
    serial_inst = serial.Serial(**config.serial_parameters)
#    serial_inst = StringIO.StringIO(open("docs/doorcard_capture").read())
#    serial_inst.in_waiting = 0
    reader = EntryReader(serial_inst)
    looper = REPL(reader, parser, uploader)
    looper.loop()
    reader.stop()


if __name__ == "__main__":
    if len(sys.argv) > 1 and "test" in sys.argv[1]:
        suite = unittest.TestLoader().loadTestsFromTestCase(Tester)
        unittest.TextTestRunner(verbosity=2).run(suite)
        sys.exit(0)
    main()

